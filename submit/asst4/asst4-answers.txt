1. The ELF magic numbers are the first 4 bytes of the ELF file header. They are 0x7F, 'E', 'L', 'F'.  The ELF file header struct is defined in "src/kern/include/elf.h" as "Elf32_Ehdr". The magic numbers are a way to quickly identify that this is a ELF format file.

2. These flags are defined by an enumeration in "src/kern/include/uio.h". UIO_USERISPACE refers to user process code, and UIO_USERSPACE refers to user process data. It is important to distinguish userspace data from kernel data (marked as UIO_SYSSPACE), since userspace code and data should not be trusted. Specifically, these flags are primarily used in uio.c, where data marked by UIO_SYSSPACE is data only transferred within the kernel and is manipulated using memmove(), while data marked by UIO_USERSPACE/UIO_USERISPACE is manipulated using copyin/copyout.

3. In "src/kern/include/uio.h" in the struct uio definition, we see that there is a "struct iovec" pointer, which is where the pointer to the location where the actual memory is stored along with the size of that location. Thus it is totally fine to just allocate a uio struct on the stack as it does not hold the actual memory in the structure, since the actual read/write operations done to the uio struct just reads the pointer to the actual data in the iovec field.

4. We need to call vfs_close() because we also call vfs_open() at the beginning the function. vfs_open() allocates memory and increases the file reference counter. Since runprogram() does not return but just goes into userspace, we must free the resources used by doing vfs_open() by doing vfs_close(), to prevent memory leaks and to ensure that the file reference counter is in sync. We don't need the file open anyways, since the new userspace process created by runprogram() will execute the file from the pointer "entrypoint" passed to "enter_new_process()" since the contents of the file have already been loaded into a new address space by the loadelf() function. 

5. The function is enter_new_process() at "src/kern/arch/mips/locore/trap.c". enter_new_process() makes the processor switch to usermode. This function is machine dependent as it called the function mips_usermode() which proceeds to call the function asm_usermode() located in "src/kern/arch/mips/locore/exception-mips.S" which is written in assembly, and that makes it inherrently machine-dependent.

6. The functions copyin() and copyout() are both defined in "src/kern/vm/copyinout.c", while memmove() is defined in "src/common/libc/string/memmove.c". copyin() and copyout() cannot be implemented the same way as memmove() because copyin() and copyout() handle data copies between userspace and kernel, and thus additional features are needed such as checking for invalid src and dst userspace addresses, as we don't trust information from userspace. 

7. userptr_t is defined in "src/kern/include/types.h" and the description states that it is a pointer to one-byte struct. This is done to distinguish a userspace pointer from other pointer types.

8. The exception code for a system call is 8, defined by EX_SYS macro in "src/kern/arch/mips/include/trapframe.h"

9. The size of a MIPS instruction is 4 bytes. This is evidenced by "src/kern/arch/mips/syscall/syscall.c" at the comments at line 136, where the function increments the program counter of the trapframe by 4 bytes shortly before returning to avoid repeating the syscall instruction. 

10. The current implementation of kill_curthread() is to create a kernel panic, which is not the correct thing to do to handle bad or misbehaved user programs. Part of the reason why the kernel exists is to make sure badly behaved user programs don't bring down the entire system along with other processes unrelated to the poorly behaving user program. The current implementation of kill_curthread() also doesn't actually kill the badly-behaving user program in question, which is what we would otherwise expect kill_curthread() to do.

11. If our system call need more than 4 arguments, in addition to reading registers a0-a3, we would then fetch the remaining arguments from the user stack. Specifically, the remaining arguments would be located at addresses starting at sp+16. Since they are in userspace we would need to use copyin() to get the remaining arguments. 

12. The SYSCALL macro, defined in "src/userland/lib/libc/arch/mips/syscalls-mips.S", loads the syscall number into the v0 register which is defined by the macro concatentation "SYS_##sym", and then jumps to the shared system-call code that does the actual system call. For example, if you wanted to do the system call "SYS_reboot" defined in "src/kern/include/kern/syscall.h", then when you use the SYSCALL macro you would pass the argument like "SYSCALL(reboot, 119). The "reboot" argument gets concatenated which forms the "SYS_reboot" define in place of "SYS_##sym", and the define of SYS_reboot is 119, which will then be the number that is placed in the v0 register.

13. The MIPS instruction to trigger a system call is literally "syscall", according to the code in "src/userland/lib/libc/arch/mips/syscalls-mips.S" on line 84.

14. The 32-bit file handle (arg0) will be found in register a0 (tf->tf_a0). Register a1 (tf->tf_a1) will be left blank since a 64-bit argument must be "aligned". The 64-bit offset (arg1) will be found in both register a2 and a3 (tf->tf_a2 and tf->tf_a3), as a 64-bit argument takes up the space of 2 registers, since registers in MIPS are 32-bits. Finally the 32-bit whence (arg2) will be found on the stack at memory address ((tf->tf_sp)+16). To retrieve this argument we will need a copyin with the user pointer argument set to ((tf->tf_sp)+16). We will write the return value into registers v0 and v1 (tf->tf_v0 and tf->tf_v1) as the return value is 64-bits in size.

15. vfs_open() in "src/kern/vfs/vfspath.c" is the function used to open a file by the kernel. VOP_READ() in "src/kern/include/vnode.h" is the macro used to read an open file. VOP_WRITE() in "src/kern/include/vnode.h" is the macro used to write to an open file. "struct vnode" defined in "src/kern/include/vnode.h" is the data structure that represents an open file by the kernel.

16. VOP_INCREF and VOP_DECREF are macros that call function which increment or decrement the reference count of a vnode usage (specifically the "vn_refcount" field in the "struct vnode" datatype. vn_refcount keeps track the number of references to the vnode. When the reference count of a vnode is 0 when running VOP_DECREF, then VOP_DECREF automatically cleans it up. 






